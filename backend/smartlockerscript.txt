/**
 * 1VALET AUTO-LISTENER - Work PC Browser Script (NGROK Version)
 *
 * v8: Re-focuses input field after adding a unit to keep keyboard open.
 * This script is ready to run.
 */
(function() {
    'use strict';
    
    // ============================================================
    // NGROK URL
    // ============================================================
    
    const SERVER_URL = "https://72bf0081d337.ngrok-free.app";
    
    // ============================================================
    
    // --- No need to edit below this line ---

    const CONFIG = { pollInterval: 5000, autoStart: true };
    const state = { isRunning: false, pollTimer: null, processedUnits: new Set(), isProcessing: false };

    // ⬇️ UPDATED THIS FUNCTION ⬇️
    async function addUnit(unitNumber) {
        console.log(`\n📦 Adding unit: ${unitNumber}...`);
        try {
            const input = [...document.querySelectorAll('input')].find(inp => inp.placeholder && inp.placeholder.toLowerCase().includes('suite') && inp.offsetParent !== null);
            if (!input) { console.error('❌ Input field not found - is popup still open?'); return false; }
            input.value = ''; input.focus();
            for (const char of unitNumber) {
                input.value += char;
                input.dispatchEvent(new Event('input', { bubbles: true }));
                await sleep(50);
            }
            input.dispatchEvent(new Event('change', { bubbles: true }));
            console.log(`  ✓ Typed: ${unitNumber}`);
            await sleep(800);
            const allOptions = [...document.querySelectorAll('div, li, span')];
            const matchingOption = allOptions.find(el => {
                const text = el.textContent.trim();
                return text === unitNumber && el.offsetParent !== null && el.getBoundingClientRect().height > 10;
            });
            if (matchingOption) {
                matchingOption.click();
                console.log(`  ✓ Selected: ${unitNumber}`);
                console.log('✅ Unit added!\n');
            } else {
                console.log('  ⚠️ Trying Enter key...');
                input.dispatchEvent(new KeyboardEvent('keydown', { key: 'Enter', keyCode: 13, bubbles: true }));
                await sleep(300);
                console.log('✅ Enter pressed\n');
            }

            // === NEW CODE TO RE-FOCUS INPUT ===
            // Wait for 1Valet UI to process the click/Enter
            await sleep(1000); 
            
            // Find the input field again (it might be re-rendered)
            const inputAfterAdd = [...document.querySelectorAll('input')].find(inp => inp.placeholder && inp.placeholder.toLowerCase().includes('suite') && inp.offsetParent !== null);
            if (inputAfterAdd) {
                inputAfterAdd.focus();
                console.log('↪️ Re-focused input for next entry.');
            } else {
                console.log('↪️ Input field not found for re-focus (popup might be closed).');
            }
            // === END OF NEW CODE ===

            return true;

        } catch (error) { 
            console.error('❌ Error:', error.message); 
            return false; 
        }
    }

    async function checkForPendingUnits() {
        if (state.isProcessing) return;
        try {
            const response = await fetch(`${SERVER_URL}/valet/pending`, {
                headers: {
                    'ngrok-skip-browser-warning': 'true'
                }
            });
            
            if (!response.ok) { return; }
            const data = await response.json();
            if (data.status === 'empty' || data.units.length === 0) return;
            console.log(`\n📋 Found ${data.count} pending unit(s) from MacBook`);
            const unitData = data.units[0];
            const unit = unitData.unit;
            if (state.processedUnits.has(unit)) {
                console.log(`⏭️  Skipping ${unit} (already processed)`);
                await fetch(`${SERVER_URL}/valet/complete`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'ngrok-skip-browser-warning': 'true'
                    },
                    body: JSON.stringify({ unit, success: true })
                });
                return;
            }
            console.log(`🔄 Processing: ${unit} (${unitData.name})`);
            state.isProcessing = true;
            const success = await addUnit(unit);
            if (success) {
                state.processedUnits.add(unit);
                await fetch(`${SERVER_URL}/valet/complete`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'ngrok-skip-browser-warning': 'true'
                    },
                    body: JSON.stringify({ unit, success: true })
                });
                console.log(`✅ Notified MacBook: ${unit} complete`);
            }
            state.isProcessing = false;
        } catch (error) {
            console.error('❌ Polling error:', error.message);
            state.isProcessing = false;
        }
    }
    
    function startListener() {
        if (SERVER_URL.includes("YOUR_NEW_NGROK_URL")) {
            console.error("❌ ERROR: You must update the SERVER_URL in the script.");
            return;
        }
        if (state.isRunning) { console.log('⚠️ Listener already running'); return; }
        const input = [...document.querySelectorAll('input')].find(inp => inp.placeholder && inp.placeholder.toLowerCase().includes('suite'));
        if (!input) { console.error('❌ "ADD DELIVERY" popup not open!'); console.log('💡 Click "ADD DELIVERY" button first, then run: startValetListener()'); return; }
        state.isRunning = true;

        console.log('\n' + '='.repeat(60));
        console.log('🚀 1VALET AUTO-LISTENER STARTED');
        console.log('='.repeat(60));
        console.log(`📡 Polling: ${SERVER_URL} (ngrok)`);
        console.log(`⏱️  Interval: ${CONFIG.pollInterval/1000}s`);
        console.log(`⚠️  Keep popup open!`);
        console.log('✋ Stop with: stopValetListener()');
        console.log('='.repeat(60) + '\n');
        state.pollTimer = setInterval(checkForPendingUnits, CONFIG.pollInterval);
        checkForPendingUnits();
    }
    function stopListener() {
        if (!state.isRunning) { console.log('⚠️ Listener not running'); return; }
        clearInterval(state.pollTimer);
        state.isRunning = false;
        console.log('\n🛑 Listener stopped');
    }
    function sleep(ms) { return new Promise(r => setTimeout(r, ms)); }
    
    function checkStatus() { 
        console.log('\n📊 STATUS'); 
        console.log('='.repeat(60)); 
        console.log(`Running: ${state.isRunning ? '✅ Yes' : '❌ No'}`); 
        console.log(`Processing: ${state.isProcessing ? '✅ Yes' : '❌ No'}`); 
        console.log(`Processed units: ${state.processedUnits.size}`); 
        console.log(`Units: ${[...state.processedUnits].join(', ') || 'None'}`); 
        console.log('='.repeat(60) + '\n'); 
    }
    
    function clearCache() { state.processedUnits.clear(); console.log('✅ Cleared processed units cache'); }
    window.startValetListener = startListener;
    window.stopValetListener = stopListener;
    window.valetStatus = checkStatus;
    window.valetClearCache = clearCache;
    window.addUnit = addUnit;
    console.log(`
╔════════════════════════════════════════════════════════════╗
║     1VALET AUTO-LISTENER - WORK PC SCRIPT (NGROK)          ║
╚════════════════════════════════════════════════════════════╝
🎛️  CONTROLS:
  startValetListener()  - Start auto-polling
  stopValetListener()   - Stop
  valetStatus()         - Show status

📝 SETUP CHECKLIST:
  ✅ Server URL set to: ${SERVER_URL}
  ✅ Click "ADD DELIVERY" button
  ✅ Keep popup open
  ✅ Paste this script in console
⚠️  IMPORTANT: You must update the SERVER_URL in this script
    every time you restart the ngrok server on your Mac.
╔════════════════════════════════════════════════════════════╝
    `);
    if (CONFIG.autoStart) {
        console.log('🔄 Auto-starting in 3s (v8)... \n');
        setTimeout(startListener, 3000);
    } else {
        console.log('💡 Run startValetListener() to begin (v8)\n');
    }
})();